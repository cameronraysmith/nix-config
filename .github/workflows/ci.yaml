name: multi-user architecture CI
on:
  workflow_dispatch:
    inputs:
      job:
        description: specific job to run (leave empty to run all)
        required: false
        type: string
  workflow_call:
    inputs:
      target_configs:
        description: comma-separated list of configs to build
        required: false
        type: string
      cache_control:
        description: cache control (use_cache, skip_cache)
        required: false
        type: string
        default: use_cache
      job_selection:
        description: comma-separated list of jobs to run
        required: false
        type: string

defaults:
  run:
    shell: bash

env:
  CACHIX_BINARY_CACHE: cameronraysmith

jobs:
  # job 1: bootstrap-verification
  # validates Makefile bootstrap workflow on clean ubuntu system
  bootstrap-verification:
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.job == '' ||
      inputs.job == 'bootstrap-verification'
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: run make bootstrap
        run: make bootstrap

      - name: verify nix installed
        run: |
          if ! command -v nix &> /dev/null; then
            echo "nix not found in PATH"
            exit 1
          fi
          echo "nix found at: $(command -v nix)"
          nix --version

      - name: verify direnv configured
        run: |
          if ! command -v direnv &> /dev/null; then
            echo "direnv not found in PATH"
            exit 1
          fi
          echo "direnv found at: $(command -v direnv)"

      - name: run make verify
        run: make verify

      - name: run make setup-user
        run: make setup-user

      - name: verify age key generated
        run: |
          if [ ! -f ~/.config/sops/age/keys.txt ]; then
            echo "age key not generated"
            exit 1
          fi
          echo "age key generated successfully"
          . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh && \
          nix shell nixpkgs#age -c age-keygen -y ~/.config/sops/age/keys.txt

  # job 2: config-validation
  # tests config.nix user definitions (phase 1)
  config-validation:
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.job == '' ||
      inputs.job == 'config-validation'
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup nix
        uses: ./.github/actions/setup-nix
        with:
          system: x86_64-linux

      - name: setup cachix
        uses: cachix/cachix-action@v16
        continue-on-error: true
        with:
          name: ${{ env.CACHIX_BINARY_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: validate user definitions
        run: |
          echo "validating config.nix user definitions through darwin configurations..."

          # verify crs58 is configured in stibnite
          echo "testing stibnite users..."
          STIBNITE_USERS=$(nix eval .#darwinConfigurations.stibnite.config.users.users --apply 'x: builtins.attrNames x' --json)
          if echo "$STIBNITE_USERS" | grep -q '"crs58"'; then
            echo "  ✅ crs58 user exists in stibnite"
          else
            echo "  ❌ crs58 user missing in stibnite"
            exit 1
          fi

          # verify cameron is configured in blackphos (once migrated) or crs58 for now
          echo "testing blackphos users..."
          BLACKPHOS_USERS=$(nix eval .#darwinConfigurations.blackphos.config.users.users --apply 'x: builtins.attrNames x' --json)
          if echo "$BLACKPHOS_USERS" | grep -q '"crs58"'; then
            echo "  ✅ crs58 user exists in blackphos (admin user configured)"
          else
            echo "  ❌ no admin user found in blackphos"
            exit 1
          fi

          # verify primary user is set correctly in stibnite
          STIBNITE_PRIMARY=$(nix eval .#darwinConfigurations.stibnite.config.system.primaryUser --raw)
          if [ "$STIBNITE_PRIMARY" = "crs58" ]; then
            echo "  ✅ stibnite primary user is crs58"
          else
            echo "  ❌ stibnite primary user is $STIBNITE_PRIMARY (expected crs58)"
            exit 1
          fi

          echo "✅ user definitions validated successfully"

  # job 3: autowiring-validation
  # verifies nixos-unified automatic config discovery
  autowiring-validation:
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.job == '' ||
      inputs.job == 'autowiring-validation'
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup nix
        uses: ./.github/actions/setup-nix
        with:
          system: x86_64-linux

      - name: setup cachix
        uses: cachix/cachix-action@v16
        continue-on-error: true
        with:
          name: ${{ env.CACHIX_BINARY_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: verify autowired outputs
        run: |
          echo "verifying nixos-unified autowiring..."

          # check darwin configs
          echo "checking darwinConfigurations..."
          DARWIN_CONFIGS=$(nix eval .#darwinConfigurations --apply 'x: builtins.attrNames x' --json)
          if [ -n "$DARWIN_CONFIGS" ] && [ "$DARWIN_CONFIGS" != "[]" ]; then
            echo "✅ darwinConfigurations detected: $DARWIN_CONFIGS"
          else
            echo "❌ darwinConfigurations not found"
            exit 1
          fi

          # check nixos configs
          echo "checking nixosConfigurations..."
          NIXOS_CONFIGS=$(nix eval .#nixosConfigurations --apply 'x: builtins.attrNames x' --json)
          if [ -n "$NIXOS_CONFIGS" ] && [ "$NIXOS_CONFIGS" != "[]" ]; then
            echo "✅ nixosConfigurations detected: $NIXOS_CONFIGS"
          else
            echo "❌ nixosConfigurations not found"
            exit 1
          fi

          # verify standalone home configurations exist
          echo ""
          echo "verifying standalone home configurations..."
          HOME_CONFIGS=$(nix eval .#legacyPackages.x86_64-linux.homeConfigurations --apply 'x: builtins.attrNames x' --json)

          # check for expected home configs
          for config in "runner@stibnite" "runner@blackphos" "raquel@blackphos"; do
            if echo "$HOME_CONFIGS" | grep -q "\"$config\""; then
              echo "  ✅ $config exists"
            else
              echo "  ❌ $config missing"
              exit 1
            fi
          done

          echo "✅ all expected homeConfigurations found"

  # job 5: secrets-workflow
  # tests sops-nix mechanics with ephemeral test keys
  secrets-workflow:
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.job == '' ||
      inputs.job == 'secrets-workflow'
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup nix
        uses: ./.github/actions/setup-nix
        with:
          system: x86_64-linux

      - name: setup cachix
        uses: cachix/cachix-action@v16
        continue-on-error: true
        with:
          name: ${{ env.CACHIX_BINARY_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: generate ephemeral test age key
        run: |
          mkdir -p test-secrets
          nix develop --command age-keygen -o test-secrets/test-key.txt
          TEST_AGE_PUBLIC=$(nix develop --command age-keygen -y test-secrets/test-key.txt)
          echo "generated test age key"
          echo "public key: $TEST_AGE_PUBLIC"
          echo "TEST_AGE_PUBLIC=$TEST_AGE_PUBLIC" >> $GITHUB_ENV

      - name: create test .sops.yaml
        run: |
          cat > test-secrets/.sops.yaml <<EOF
          creation_rules:
            - path_regex: .*\.yaml$
              key_groups:
                - age:
                  - $TEST_AGE_PUBLIC
          EOF
          echo "created test .sops.yaml"

      - name: create and encrypt test secret
        run: |
          cd test-secrets
          echo "test_secret: test-value-12345" > test.yaml
          nix develop --command sops -e -i test.yaml
          echo "encrypted test secret"

      - name: verify decryption
        run: |
          cd test-secrets
          SOPS_AGE_KEY_FILE=test-key.txt \
            nix develop --command sops -d test.yaml | grep -q "test_secret: test-value-12345"
          echo "✅ test secret decryption successful"

      - name: validate sops structure
        run: |
          if [ -f .sops.yaml ]; then
            echo "✅ .sops.yaml exists in repository"
            nix develop --command sops --version
          else
            echo "⚠️  .sops.yaml not found (may need creation)"
          fi

      - name: cleanup test secrets
        if: always()
        run: |
          rm -rf test-secrets
          echo "✅ ephemeral test secrets cleaned up"

  # job 6: justfile-activation
  # tests activation workflow auto-detection
  justfile-activation:
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.job == '' ||
      inputs.job == 'justfile-activation'
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup nix
        uses: ./.github/actions/setup-nix
        with:
          system: x86_64-linux

      - name: setup cachix
        uses: cachix/cachix-action@v16
        continue-on-error: true
        with:
          name: ${{ env.CACHIX_BINARY_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: test justfile recipes exist
        run: |
          nix develop --command just --list

          # verify activation recipe exists
          if nix develop --command just --list 2>&1 | grep -q "activate"; then
            echo "✅ activate recipe found"
          else
            echo "❌ activate recipe not found"
            exit 1
          fi

      - name: test dry-run builds
        run: |
          # test existing justfile recipes
          echo "testing existing justfile recipes with dry-run..."

          # these should work with current justfile
          nix develop --command just -n check
          nix develop --command just -n lint

      - name: test activation targets (dry-run)
        run: |
          echo "testing activation targets with dry-run..."

          # test standalone home configuration activation
          for config in "runner@stibnite" "runner@blackphos" "raquel@blackphos"; do
            echo "  testing: just -n activate $config"
            if nix develop --command just -n activate "$config"; then
              echo "  ✅ $config activation dry-run succeeds"
            else
              echo "  ❌ $config activation dry-run failed"
              exit 1
            fi
          done

          echo "✅ all activation targets validated"

  # job 6: nix
  # builds all flake outputs via omnix (nixos configs, home configs, checks, devshells)
  # matrix strategy: test all flake-supported systems on their native platforms
  # pattern adapted from: https://github.com/Defelo/nixpkgs-review-gha
  nix:
    if: |
      github.event_name != 'workflow_dispatch' ||
      inputs.job == '' ||
      inputs.job == 'nix'
    strategy:
      fail-fast: false  # allow each system to test independently
      matrix:
        system:
          - x86_64-linux    # standard linux (ubuntu-latest)
          - aarch64-linux   # arm linux (ubuntu-24.04-arm, may require org access)
          - aarch64-darwin  # apple silicon macOS (macos-latest, 10x cost)
    # dynamic runner selection based on system architecture
    runs-on: >-
      ${{ (matrix.system == 'x86_64-linux' && 'ubuntu-latest')
      || (matrix.system == 'aarch64-linux' && 'ubuntu-24.04-arm')
      || (matrix.system == 'aarch64-darwin' && 'macos-latest') }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup nix
        uses: ./.github/actions/setup-nix
        with:
          system: ${{ matrix.system }}

      - name: setup cachix
        uses: cachix/cachix-action@v16
        continue-on-error: true
        with:
          name: ${{ env.CACHIX_BINARY_CACHE }}
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}

      - name: build all outputs via omnix
        run: |
          echo "building all flake outputs for ${{ matrix.system }} via om ci..."
          if [ "${{ matrix.system }}" = "aarch64-darwin" ]; then
            # for darwin: build and push to cachix (including build deps for cache efficiency)
            nix develop --command om ci run --systems "${{ matrix.system }}" --include-all-dependencies | tee /dev/stderr | cachix push ${{ env.CACHIX_BINARY_CACHE }}
          else
            # for linux: just build (we're happy to rebuild these)
            nix develop --command om ci run --systems "${{ matrix.system }}"
          fi
          echo "✅ all outputs built successfully for ${{ matrix.system }}"

      - name: report disk usage
        if: always()
        run: df -h

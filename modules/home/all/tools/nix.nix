## home-manager only
#
# https://github.com/nix-community/home-manager/issues/6079
# Modifying the nix attribute from home-manager would override /etc/nix/nix.conf, 
# generated by modules/nixos/shared/nix.nix and
# managed by nix-darwin or nixos, when using them with home-manager.
# However, if you're using home-manager without nixos or nix-darwin,
# you can add the configuration below to configure nix
# via ~/.config/nix/nix.conf.
#
# { flake, pkgs, lib, ... }:
#
# {
#   nix = {
#     package = lib.mkDefault (pkgs.nix);
#     nixPath = [ "nixpkgs=${flake.inputs.nixpkgs}" ]; # Enables use of `nix-shell -p ...` etc
#     registry.nixpkgs.flake = flake.inputs.nixpkgs; # Make `nix shell` etc use pinned nixpkgs
#     settings = {
#       build-users-group = lib.mkDefault "nixbld";
#       auto-optimise-store = false;
#       experimental-features = "nix-command flakes auto-allocate-uids";
#       extra-platforms = lib.mkIf pkgs.stdenv.isDarwin "aarch64-darwin x86_64-darwin";
#       flake-registry = builtins.toFile "empty-flake-registry.json" ''{"flakes":[],"version":2}'';
#       max-jobs = "auto";
#       trusted-users = [ "root" (if pkgs.stdenv.isDarwin then flake.config.me.username else "@wheel") ];
#     };
#   };
# }
#
## nixos/nix-darwin independent of home-manager
#
# Overwriting $XDG_CONFIG_HOME/nix/nix.conf from the nix store marks the fact that the
# global configuration should not be overridden without privilege escalation.
#
{
  home.file."~/.config/nix/nix.conf".text = ''
    # WARNING: this file is generated from an alternative to the nix.settings option in
    # your Home Manager configuration at $XDG_CONFIG_HOME/nix/nix.conf
    # or $HOME/.config/nix/nix.conf.
    #
    # Editing this file will have no effect.
    #
    # The active nix configuration is an auto-generated symlink:
    #
    #   - `ls -alh /etc/nix/nix.conf` on this system from
    #   - ./modules/nixos/shared/nix.nix in your nix configuration.
    #
  '';
}
